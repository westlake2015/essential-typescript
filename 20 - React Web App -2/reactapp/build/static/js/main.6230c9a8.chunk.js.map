{"version":3,"sources":["data/types.ts","data/entities.ts","data/dataStore.ts","data/reducer.ts","data/httpHandler.ts","data/actionCreators.ts","header.tsx","productItem.tsx","categoryList.tsx","productList.tsx","data/productListConnector.ts","orderDetails.tsx","summary.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ACTIONS","OrderLine","product","quantity","Object","classCallCheck","this","createClass","key","get","price","Order","initialLines","_this","lines","Map","forEach","ol","set","id","value","prod","has","removeProduct","delete","toConsumableArray","values","reduce","total","dataStore","createStore","data","action","products","order","type","ADD_PRODUCTS","objectSpread","concat","payload","MODIFY_ORDER","addProduct","RESET_ORDER","urls","HttpHandler","callback","Axios","then","response","orderData","orderLines","map","productId","productName","name","post","_len","arguments","length","Array","_key","Header","_Component","possibleConstructorReturn","getPrototypeOf","apply","inherits","count","props","productCount","react_default","a","createElement","className","toFixed","react_router_dom","to","Component","ProductItem","_useState","useState","_useState2","slicedToArray","setQuantity","description","onClick","onChange","ev","Number","target","CategoryList","categories","c","btnClass","selected","selectCategory","ProductList","call","cat","setState","selectedCategory","state","_this2","header_Header","categoryList_CategoryList","p","productItem_ProductItem","addToOrder","_this3","filter","category","mapDispatchToProps","ConnectedProductList","connect","Set","connectFunction","OrderDetails","_class","line","colSpan","submitCallback","Summary","match","params","App","httpHandler","render","es","store","react_router","path","component","assign","routeProps","storeOrder","getState","history","push","loadProducts","dispatch","Boolean","window","location","hostname","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6JAQYA,2OCACC,EAAb,WACI,SAAAA,EAAmBC,EAAyBC,GAAkBC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAAK,KAAAJ,UAAAI,KAAAH,WADlE,OAAAC,OAAAG,EAAA,EAAAH,CAAAH,EAAA,EAAAO,IAAA,QAAAC,IAAA,WAMQ,OAAOH,KAAKJ,QAAQQ,MAAQJ,KAAKH,aANzCF,EAAA,GAUaU,EAAb,WAGI,SAAAA,EAAYC,GAA4B,IAAAC,EAAAP,KAAAF,OAAAC,EAAA,EAAAD,CAAAE,KAAAK,GAAAL,KAFhCQ,MAAQ,IAAIC,IAGZH,GACAA,EAAaI,QAAQ,SAAAC,GAAE,OAAIJ,EAAKC,MAAMI,IAAID,EAAGf,QAAQiB,GAAIF,KALrE,OAAAb,OAAAG,EAAA,EAAAH,CAAAO,EAAA,EAAAH,IAAA,aAAAY,MAAA,SASsBC,EAAelB,GACzBG,KAAKQ,MAAMQ,IAAID,EAAKF,IACH,IAAbhB,EACAG,KAAKiB,cAAcF,EAAKF,IAExBb,KAAKQ,MAAML,IAAIY,EAAKF,IAAKhB,UAAYA,EAGzCG,KAAKQ,MAAMI,IAAIG,EAAKF,GAAI,IAAIlB,EAAUoB,EAAMlB,MAjBxD,CAAAK,IAAA,gBAAAY,MAAA,SAqByBD,GACjBb,KAAKQ,MAAMU,OAAOL,KAtB1B,CAAAX,IAAA,aAAAC,IAAA,WA0BQ,OAAOL,OAAAqB,EAAA,EAAArB,CAAIE,KAAKQ,MAAMY,YA1B9B,CAAAlB,IAAA,eAAAC,IAAA,WA8BQ,OAAOL,OAAAqB,EAAA,EAAArB,CAAIE,KAAKQ,MAAMY,UACjBC,OAAO,SAACC,EAAOX,GAAR,OAAeW,EAASX,EAAGd,UAAU,KA/BzD,CAAAK,IAAA,QAAAC,IAAA,WAmCQ,OAAOL,OAAAqB,EAAA,EAAArB,CAAIE,KAAKQ,MAAMY,UAAUC,OAAO,SAACC,EAAOX,GAAR,OAAeW,EAASX,EAAGW,OAAO,OAnCjFjB,EAAA,GCdakB,EAA2CC,YCC9C,SAACC,EAA8BC,GAGrC,OADAD,EAAOA,GAAQ,CAAEE,SAAU,GAAIC,MAAO,IAAIvB,GACnCqB,EAAOG,MACV,KAAKnC,EAAQoC,aACT,OAAOhC,OAAAiC,EAAA,EAAAjC,CAAA,GACA2B,EADP,CAEIE,SAAQ,GAAAK,OAAAlC,OAAAqB,EAAA,EAAArB,CAAM2B,EAAKE,UAAX7B,OAAAqB,EAAA,EAAArB,CAAwB4B,EAAOO,YAG/C,KAAKvC,EAAQwC,aAET,OADAT,EAAKG,MAAMO,WAAWT,EAAOO,QAAQrC,QAAS8B,EAAOO,QAAQpC,UACtDC,OAAAiC,EAAA,EAAAjC,CAAA,GAAK2B,GAEhB,KAAK/B,EAAQ0C,YACT,OAAOtC,OAAAiC,EAAA,EAAAjC,CAAA,GACA2B,EADP,CAEIG,MAAO,IAAIvB,IAEnB,QACI,OAAOoB,8BClBbY,EAGQ,gBAHRA,EAIM,cAGCC,EAAb,oBAAAA,IAAAxC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsC,GAAA,OAAAxC,OAAAG,EAAA,EAAAH,CAAAwC,EAAA,EAAApC,IAAA,eAAAY,MAAA,SAEiByB,GACTC,IAAMrC,IAAIkC,GAAeI,KAAK,SAAAC,GAAQ,OAAIH,EAASG,EAASjB,UAHpE,CAAAvB,IAAA,aAAAY,MAAA,SAMec,EAAcW,GACrB,IAAII,EAAY,CACZnC,MAAOV,OAAAqB,EAAA,EAAArB,CAAI8B,EAAMgB,WAAWxB,UAAUyB,IAAI,SAAAlC,GAAE,MAAK,CAC7CmC,UAAWnC,EAAGf,QAAQiB,GACtBkC,YAAapC,EAAGf,QAAQoD,KACxBnD,SAAUc,EAAGd,aAGrB2C,IAAMS,KAAKZ,EAAaM,GACnBF,KAAK,SAAAC,GAAQ,OAAIH,EAASG,EAASjB,KAAKZ,UAfrDyB,EAAA,GCVaH,EAAa,mBAAAe,EAAAC,UAAAC,OAAIzB,EAAJ,IAAA0B,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAI3B,EAAJ2B,GAAAH,UAAAG,GAAA,MAAgD,CACtEzB,KAAMnC,EAAQoC,aACdG,QAASN,YCEA4B,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAzD,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,GAAAzD,OAAA2D,EAAA,EAAA3D,CAAAE,KAAAF,OAAA4D,EAAA,EAAA5D,CAAAyD,GAAAI,MAAA3D,KAAAmD,YAAA,OAAArD,OAAA8D,EAAA,EAAA9D,CAAAyD,EAAAC,GAAA1D,OAAAG,EAAA,EAAAH,CAAAyD,EAAA,EAAArD,IAAA,SAAAY,MAAA,WAGQ,IAAI+C,EAAQ7D,KAAK8D,MAAMlC,MAAMmC,aAC7B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACN,IAAVN,EAAc,iBAAd,GAAA7B,OACQ6B,EADR,kBAAA7B,OACgChC,KAAK8D,MAAMlC,MAAMN,MAAM8C,QAAQ,IACjEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,SAASH,UAAU,8BAA/B,qBAPZZ,EAAA,CAA4BgB,qBCIfC,EAAwC,SAACV,GAAU,IAAAW,EAE5BC,mBAAiB,GAFWC,EAAA7E,OAAA8E,EAAA,EAAA9E,CAAA2E,EAAA,GAErD5E,EAFqD8E,EAAA,GAE3CE,EAF2CF,EAAA,GAI5D,OAAOX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAClBH,EAAAC,EAAAC,cAAA,UACMJ,EAAMlE,QAAQoD,KAChBgB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8CAAhB,IACOL,EAAMlE,QAAQQ,MAAMgE,QAAQ,KAGvCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACTL,EAAMlE,QAAQkF,YAChBd,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qCACVY,QAAU,kBAAMjB,EAAMvB,SAASuB,EAAMlE,QAASC,KADtD,eAIAmE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sCACVa,SAAW,SAACC,GAAD,OAAQJ,EAAYK,OAAOD,EAAGE,OAAOrE,UACpDkD,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,uBCzBHkB,EAAb,SAAA5B,GAAA,SAAA4B,IAAA,OAAAtF,OAAAC,EAAA,EAAAD,CAAAE,KAAAoF,GAAAtF,OAAA2D,EAAA,EAAA3D,CAAAE,KAAAF,OAAA4D,EAAA,EAAA5D,CAAAsF,GAAAzB,MAAA3D,KAAAmD,YAAA,OAAArD,OAAA8D,EAAA,EAAA9D,CAAAsF,EAAA5B,GAAA1D,OAAAG,EAAA,EAAAH,CAAAsF,EAAA,EAAAlF,IAAA,SAAAY,MAAA,WAEa,IAAAP,EAAAP,KACL,OAAOgE,EAAAC,EAAAC,cAAA,WACD,CAAC,OAADlC,OAAAlC,OAAAqB,EAAA,EAAArB,CAAWE,KAAK8D,MAAMuB,aAAYxC,IAAI,SAAAyC,GACpC,IAAIC,EAAWhF,EAAKuD,MAAM0B,WAAaF,EACjC,cAAe,gBACrB,OAAOtB,EAAAC,EAAAC,cAAA,UAAQhE,IAAMoF,EACbnB,UAAS,iBAAAnC,OAAoBuD,GAC7BR,QAAU,kBAAMxE,EAAKuD,MAAM2B,eAAeH,KAC5CA,UAVtBF,EAAA,CAAkCb,aCSrBmB,EAAb,SAAAlC,GAEI,SAAAkC,EAAY5B,GAAc,IAAAvD,EAAA,OAAAT,OAAAC,EAAA,EAAAD,CAAAE,KAAA0F,IACtBnF,EAAAT,OAAA2D,EAAA,EAAA3D,CAAAE,KAAAF,OAAA4D,EAAA,EAAA5D,CAAA4F,GAAAC,KAAA3F,KAAM8D,KAiCV2B,eAAiB,SAACG,GACdrF,EAAKsF,SAAS,CAAEC,iBAAkBF,KAjClCrF,EAAKwF,MAAQ,CACTD,iBAAkB,OAHAvF,EAF9B,OAAAT,OAAA8D,EAAA,EAAA9D,CAAA4F,EAAAlC,GAAA1D,OAAAG,EAAA,EAAAH,CAAA4F,EAAA,EAAAxF,IAAA,SAAAY,MAAA,WASa,IAAAkF,EAAAhG,KACL,OAAOgE,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAC+B,EAAD,CAAQrE,MAAQ5B,KAAK8D,MAAMlC,QAC3BoC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACgC,EAAD,CAAcb,WAAarF,KAAK8D,MAAMuB,WAClCG,SAAWxF,KAAK+F,MAAMD,iBACtBL,eAAiBzF,KAAKyF,kBAE9BzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEPnE,KAAK2B,SAASkB,IAAI,SAAAsD,GAAC,OACfnC,EAAAC,EAAAC,cAACkC,EAAD,CAAalG,IAAMiG,EAAEtF,GAAKjB,QAAUuG,EAChC5D,SAAWyD,EAAKlC,MAAMuC,qBAvB1D,CAAAnG,IAAA,WAAAC,IAAA,WA+B8B,IAAAmG,EAAAtG,KACtB,OAAOA,KAAK8D,MAAMnC,SAAS4E,OAAO,SAAAJ,GAAC,MAAoC,QAAhCG,EAAKP,MAAMD,kBAC3CK,EAAEK,WAAaF,EAAKP,MAAMD,uBAjCzCJ,EAAA,CAAiCnB,aCN3BkC,EAAqB,CACvBJ,WLFA,SAACzG,EAAkBC,GAAnB,MAA4D,CACxDgC,KAAMnC,EAAQwC,aACdD,QAAS,CAAErC,UAASC,eKIf6G,EADWC,YAVA,SAAClF,GAAD,MAAsB,CAC1CE,SAAUF,EAAKE,SACf0D,WAAWvF,OAAAqB,EAAA,EAAArB,CAAK,IAAI8G,IAAInF,EAAKE,SAASkB,IAAI,SAAAsD,GAAC,OAAIA,EAAEK,aACjD5E,MAAOH,EAAKG,QAOiC6E,EACbI,CAAgBnB,WCAvCoB,EADWH,YATA,SAAClF,GAAD,MAAsB,CAC1CG,MAAOH,EAAKG,QASYiF,CAAe,SAAArD,GAAA,SAAAuD,IAAA,OAAAjH,OAAAC,EAAA,EAAAD,CAAAE,KAAA+G,GAAAjH,OAAA2D,EAAA,EAAA3D,CAAAE,KAAAF,OAAA4D,EAAA,EAAA5D,CAAAiH,GAAApD,MAAA3D,KAAAmD,YAAA,OAAArD,OAAA8D,EAAA,EAAA9D,CAAAiH,EAAAvD,GAAA1D,OAAAG,EAAA,EAAAH,CAAAiH,EAAA,EAAA7G,IAAA,SAAAY,MAAA,WAG/B,OAAOkD,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCAAd,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,sBAAiBF,EAAAC,EAAAC,cAAA,qBACjBF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,cAGRH,EAAAC,EAAAC,cAAA,aACMlE,KAAK8D,MAAMlC,MAAMgB,WAAWC,IAAI,SAAAmE,GAAI,OAClChD,EAAAC,EAAAC,cAAA,MAAIhE,IAAM8G,EAAKpH,QAAQiB,IACnBmD,EAAAC,EAAAC,cAAA,UAAM8C,EAAKnH,UACXmE,EAAAC,EAAAC,cAAA,UAAM8C,EAAKpH,QAAQoD,MACnBgB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,IACO6C,EAAKpH,QAAQQ,MAAMgE,QAAQ,IAElCJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,IACO6C,EAAK1F,MAAM8C,QAAQ,QAKtCJ,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAa8C,QAAS,GAApC,UACAjD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,IACOnE,KAAK8D,MAAMlC,MAAMN,MAAM8C,QAAQ,QAMtDJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,YAAYH,UAAU,yBAAlC,QAGAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBACVY,QAAU/E,KAAK8D,MAAMoD,gBAD7B,sBA1C2BH,EAAA,CACzBxC,cCLL4C,EAAb,SAAA3D,GAAA,SAAA2D,IAAA,OAAArH,OAAAC,EAAA,EAAAD,CAAAE,KAAAmH,GAAArH,OAAA2D,EAAA,EAAA3D,CAAAE,KAAAF,OAAA4D,EAAA,EAAA5D,CAAAqH,GAAAxD,MAAA3D,KAAAmD,YAAA,OAAArD,OAAA8D,EAAA,EAAA9D,CAAAqH,EAAA3D,GAAA1D,OAAAG,EAAA,EAAAH,CAAAqH,EAAA,EAAAjH,IAAA,SAAAY,MAAA,WAEQ,IAAID,EAAKb,KAAK8D,MAAMsD,MAAMC,OAAOxG,GACjC,OAAOmD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAClBH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,2BAAoBrD,GACpBmD,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASC,GAAG,YAAYH,UAAU,mBAAlC,WARZgD,EAAA,CAA6B5C,aCGR+C,cAGjB,SAAAA,EAAYxD,GAAc,IAAAvD,EAAA,OAAAT,OAAAC,EAAA,EAAAD,CAAAE,KAAAsH,IACtB/G,EAAAT,OAAA2D,EAAA,EAAA3D,CAAAE,KAAAF,OAAA4D,EAAA,EAAA5D,CAAAwH,GAAA3B,KAAA3F,KAAM8D,KAHFyD,YAAc,IAAIjF,EAEA/B,EAM1BiH,OAAS,kBACLxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAUC,MAAQnG,GACdyC,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAACyD,EAAA,EAAD,KACI3D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAYnB,IACpC1C,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAOC,KAAK,SAASJ,OAAS,SAAC1D,GAAD,OAC1BE,EAAAC,EAAAC,cAAC4C,EAADhH,OAAAgI,OAAA,GAAmBhE,EAAnB,CAA2BoD,eAAiB,kBACxC3G,EAAK2G,eAAepD,UAE5BE,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAYV,IACvCnD,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAUrD,GAAG,mBAjBP/D,EAuB1B2G,eAAiB,SAACa,GACdxH,EAAKgH,YAAYS,WAAWzG,EAAU0G,WAAWrG,MAC7C,SAAAf,GAAE,OAAIkH,EAAWG,QAAQC,KAAnB,YAAAnG,OAAqCnB,OAvB/CN,EAAKgH,YAAYa,aAAa,SAAA3G,GAAI,OAC9BF,EAAU8G,SAASlG,EAAUwB,WAAV,EAAA7D,OAAAqB,EAAA,EAAArB,CAAc2B,OAHflB,6BAHGgE,aCHb+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,iECXNsB,IAASlB,OAAOxD,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvG,KAAK,SAAAwG,GACjCA,EAAaC","file":"static/js/main.6230c9a8.chunk.js","sourcesContent":["import { Product, Order } from \"./entities\";\r\nimport { Action } from \"redux\";\r\n\r\nexport interface StoreData {\r\n    products: Product[],\r\n    order: Order\r\n}\r\n\r\nexport enum ACTIONS {\r\n    ADD_PRODUCTS, MODIFY_ORDER, RESET_ORDER\r\n}\r\n\r\nexport interface AddProductsAction extends Action<ACTIONS.ADD_PRODUCTS> { \r\n    payload: Product[]\r\n}\r\n\r\nexport interface ModifyOrderAction extends Action<ACTIONS.MODIFY_ORDER> {\r\n    payload: {\r\n        product: Product, \r\n        quantity: number\r\n    }\r\n}\r\n\r\nexport interface ResetOrderAction extends Action<ACTIONS.RESET_ORDER> {}\r\n\r\nexport type StoreAction = AddProductsAction | ModifyOrderAction | ResetOrderAction;\r\n","export type Product = {\r\n    id: number, \r\n    name: string,\r\n    description: string,\r\n    category: string, \r\n    price: number \r\n};\r\n\r\nexport class OrderLine {\r\n    constructor(public product: Product, public quantity: number) {\r\n        // no statements required\r\n    }\r\n\r\n    get total(): number {\r\n        return this.product.price * this.quantity;\r\n    }\r\n}\r\n\r\nexport class Order {\r\n    private lines = new Map<number, OrderLine>();\r\n\r\n    constructor(initialLines?: OrderLine[]) {\r\n        if (initialLines) {\r\n            initialLines.forEach(ol => this.lines.set(ol.product.id, ol));\r\n        }\r\n    }\r\n\r\n    public addProduct(prod: Product, quantity: number) {\r\n        if (this.lines.has(prod.id)) {\r\n            if (quantity === 0) {\r\n                this.removeProduct(prod.id);\r\n            } else {\r\n                this.lines.get(prod.id)!.quantity += quantity;\r\n            }\r\n        } else {\r\n            this.lines.set(prod.id, new OrderLine(prod, quantity));\r\n        }\r\n    }\r\n\r\n    public removeProduct(id: number) {\r\n        this.lines.delete(id);\r\n    }\r\n\r\n    get orderLines(): OrderLine[] {\r\n        return [...this.lines.values()];\r\n    }\r\n\r\n    get productCount(): number {\r\n        return [...this.lines.values()]\r\n            .reduce((total, ol) => total += ol.quantity, 0);\r\n    }\r\n\r\n    get total(): number {\r\n        return [...this.lines.values()].reduce((total, ol) => total += ol.total, 0);\r\n    }\r\n}\r\n","import { createStore, Store } from \"redux\";\r\nimport { StoreReducer } from \"./reducer\";\r\nimport { StoreData, StoreAction } from \"./types\";\r\n\r\nexport const dataStore: Store<StoreData, StoreAction> = createStore(StoreReducer);\r\n","import { ACTIONS, StoreData, StoreAction } from \"./types\";\r\nimport { Order } from \"./entities\";\r\nimport { Reducer } from \"redux\";\r\n\r\nexport const StoreReducer: Reducer<StoreData, StoreAction> \r\n        = (data: StoreData | undefined , action)  => {\r\n\r\n    data = data || { products: [], order: new Order() }\r\n    switch(action.type) {\r\n        case ACTIONS.ADD_PRODUCTS:\r\n            return {\r\n                ...data,\r\n                products: [...data.products, ...action.payload]\r\n            };\r\n\r\n        case ACTIONS.MODIFY_ORDER:\r\n            data.order.addProduct(action.payload.product, action.payload.quantity);\r\n            return { ...data };\r\n            \r\n        case ACTIONS.RESET_ORDER: \r\n            return {\r\n                ...data, \r\n                order: new Order()\r\n            }\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport { Product, Order}  from \"./entities\";\r\n\r\n// const protocol = document.location.protocol;\r\n// const hostname = document.location.hostname;\r\n// const port = 4600;\r\n\r\nconst urls = {\r\n    // products: `${protocol}//${hostname}:${port}/products`,\r\n    // orders: `${protocol}//${hostname}:${port}/orders`\r\n    products: \"/api/products\",\r\n    orders: \"/api/orders\"\r\n};\r\n\r\nexport class HttpHandler {\r\n\r\n    loadProducts(callback: (products: Product[]) => void): void {\r\n        Axios.get(urls.products).then(response => callback(response.data))\r\n    }\r\n\r\n    storeOrder(order: Order, callback: (id: number) => void): void {\r\n        let orderData = {\r\n            lines: [...order.orderLines.values()].map(ol => ({\r\n                productId: ol.product.id,\r\n                productName: ol.product.name, \r\n                quantity: ol.quantity\r\n            }))\r\n        }       \r\n        Axios.post(urls.orders, orderData)\r\n            .then(response => callback(response.data.id));\r\n    }\r\n}\r\n","import { ACTIONS, AddProductsAction, ModifyOrderAction, ResetOrderAction } \r\n    from \"./types\";\r\nimport { Product } from \"./entities\";\r\n\r\nexport const addProduct = (...products: Product[]): AddProductsAction => ({\r\n    type: ACTIONS.ADD_PRODUCTS,\r\n    payload: products\r\n});\r\n\r\nexport const modifyOrder = \r\n    (product: Product, quantity: number): ModifyOrderAction => ({\r\n        type: ACTIONS.MODIFY_ORDER,\r\n        payload: { product, quantity}\r\n    });\r\n\r\nexport const resetOrder = (): ResetOrderAction => ({\r\n    type: ACTIONS.RESET_ORDER\r\n});\r\n","import React, { Component } from \"react\";\r\nimport { Order } from \"./data/entities\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n    order: Order\r\n}\r\n\r\nexport class Header extends Component<Props> {\r\n\r\n    render() {\r\n        let count = this.props.order.productCount;\r\n        return <div className=\"p-1 bg-secondary text-white text-right\">\r\n            { count === 0 ? \"(No Selection)\" \r\n                : `${ count } product(s), $${ this.props.order.total.toFixed(2)}` }\r\n            <NavLink to=\"/order\" className=\"btn btn-sm btn-primary m-1\">\r\n                Submit Order\r\n            </NavLink>\r\n        </div>\r\n    }\r\n}\r\n","import React, { FunctionComponent, useState } from \"react\";\r\nimport { Product } from \"./data/entities\";\r\n\r\ninterface Props {\r\n    product: Product,\r\n    callback: (product: Product, quantity: number) => void    \r\n}\r\n\r\n// interface State {\r\n//     quantity: number\r\n// }\r\n\r\nexport const ProductItem: FunctionComponent<Props> = (props) => {\r\n\r\n    const [quantity, setQuantity] = useState<number>(1);\r\n    \r\n    return <div className=\"card m-1 p-1 bg-light\">\r\n        <h4>\r\n            { props.product.name }\r\n            <span className=\"badge badge-pill badge-primary float-right\">\r\n                ${ props.product.price.toFixed(2) }\r\n            </span>\r\n        </h4>\r\n        <div className=\"card-text bg-white p-1\">\r\n            { props.product.description }\r\n            <button className=\"btn btn-success btn-sm float-right\"\r\n                    onClick={ () => props.callback(props.product, quantity) }>\r\n                Add To Cart\r\n            </button>                                \r\n            <select className=\"form-control-inline float-right m-1\" \r\n                    onChange={ (ev) => setQuantity(Number(ev.target.value)) }>\r\n                <option>1</option>\r\n                <option>2</option>\r\n                <option>3</option>                \r\n            </select>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\ninterface Props {\r\n    selected: string,\r\n    categories: string[],\r\n    selectCategory: (category: string) => void;\r\n}\r\n\r\nexport class CategoryList extends Component<Props> {\r\n\r\n    render() {\r\n        return <div>\r\n            { [\"All\", ...this.props.categories].map(c => {\r\n                let btnClass = this.props.selected === c \r\n                    ? \"btn-primary\": \"btn-secondary\";\r\n                return <button key={ c }\r\n                        className={ `btn btn-block ${btnClass}` } \r\n                        onClick={ () => this.props.selectCategory(c) }>\r\n                    { c }\r\n                </button>            \r\n            }) }\r\n        </div>     \r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Header } from \"./header\";\r\nimport { ProductItem } from \"./productItem\";\r\nimport { CategoryList} from \"./categoryList\";\r\nimport { Product, Order } from \"./data/entities\";\r\n\r\ninterface Props {\r\n    products: Product[],\r\n    categories: string[],\r\n    order: Order,\r\n    addToOrder: (product: Product, quantity: number) => void\r\n}\r\n\r\ninterface State {\r\n    selectedCategory: string;\r\n}\r\n\r\nexport class ProductList extends Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedCategory: \"All\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Header order={ this.props.order } />\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-3 p-2\">\r\n                        <CategoryList categories={ this.props.categories } \r\n                            selected={ this.state.selectedCategory }\r\n                            selectCategory={ this.selectCategory } />\r\n                    </div>\r\n                    <div className=\"col-9 p-2\">\r\n                        {\r\n                            this.products.map(p => \r\n                                <ProductItem key={ p.id } product={ p } \r\n                                    callback={ this.props.addToOrder } />)\r\n                        }\r\n                    </div>                            \r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    get products(): Product[] {\r\n        return this.props.products.filter(p => this.state.selectedCategory === \"All\" \r\n            || p.category === this.state.selectedCategory);\r\n    }\r\n\r\n    selectCategory = (cat: string) => {\r\n        this.setState({ selectedCategory: cat});\r\n    }\r\n}\r\n","import { StoreData } from \"./types\";\r\nimport { modifyOrder } from \"./actionCreators\";\r\nimport { connect } from \"react-redux\";\r\nimport { ProductList } from \"../productList\";\r\n\r\nconst mapStateToProps = (data: StoreData) => ({\r\n    products: data.products,\r\n    categories: [...new Set(data.products.map(p => p.category))],\r\n    order: data.order\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    addToOrder: modifyOrder\r\n}\r\n\r\nconst connectFunction = connect(mapStateToProps, mapDispatchToProps);\r\nexport const ConnectedProductList = connectFunction(ProductList);\r\n","import React, { Component } from \"react\";\r\nimport { StoreData } from \"./data/types\";\r\nimport { Order } from \"./data/entities\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = (data: StoreData) => ({\r\n    order: data.order\r\n})\r\n\r\ninterface Props {\r\n    order: Order,\r\n    submitCallback: () => void    \r\n}\r\n\r\nconst connectFunction = connect(mapStateToProps);\r\nexport const OrderDetails = connectFunction(\r\n    class extends Component<Props> {\r\n        render() {\r\n            return <div>\r\n            <h3 className=\"text-center bg-primary text-white p-2\">Order Summary</h3>\r\n            <div className=\"p-3\">\r\n                <table className=\"table table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Quantity</th><th>Product</th>\r\n                            <th className=\"text-right\">Price</th>\r\n                            <th className=\"text-right\">Subtotal</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { this.props.order.orderLines.map(line =>\r\n                            <tr key={ line.product.id }>                            \r\n                                <td>{ line.quantity }</td>\r\n                                <td>{ line.product.name }</td>\r\n                                <td className=\"text-right\">\r\n                                    ${ line.product.price.toFixed(2) }\r\n                                </td>\r\n                                <td className=\"text-right\">\r\n                                    ${ line.total.toFixed(2) }\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <th className=\"text-right\" colSpan={3}>Total:</th>\r\n                            <th className=\"text-right\">\r\n                                ${ this.props.order.total.toFixed(2) }\r\n                            </th>\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>\r\n            </div>\r\n            <div className=\"text-center\">\r\n                <NavLink to=\"/products\" className=\"btn btn-secondary m-1\">\r\n                    Back\r\n                </NavLink>\r\n                <button className=\"btn btn-primary m-1\" \r\n                        onClick={ this.props.submitCallback }>\r\n                    Submit Order\r\n                </button>                \r\n            </div>\r\n        </div>                \r\n    }});\r\n","import React, { Component } from \"react\";\r\nimport { match } from \"react-router\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface Params {\r\n    id: string;\r\n}\r\n\r\ninterface Props {\r\n    match: match<Params>\r\n}\r\n\r\nexport class Summary extends Component<Props> {\r\n    render() {\r\n        let id = this.props.match.params.id;\r\n        return <div className=\"m-2 text-center\">\r\n            <h2>Thanks!</h2>\r\n            <p>Thanks for placing your order.</p>\r\n            <p>Your order is #{ id }</p>\r\n            <p>We'll ship your goods as soon as possible.</p>\r\n            <NavLink to=\"/products\" className=\"btn btn-primary\">OK</NavLink>\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { dataStore } from \"./data/dataStore\";\nimport { Provider } from 'react-redux';\nimport { HttpHandler } from \"./data/httpHandler\";\nimport { addProduct } from './data/actionCreators';\nimport { ConnectedProductList } from './data/productListConnector';\nimport { Switch, Route, Redirect, BrowserRouter, RouteComponentProps } \n    from \"react-router-dom\";\nimport { OrderDetails } from './orderDetails';\nimport { Summary } from './summary';\n\ninterface Props {\n    // no props required\n}\n\nexport default class App extends Component<Props> {\n    private httpHandler = new HttpHandler();\n\n    constructor(props: Props) {\n        super(props);\n        this.httpHandler.loadProducts(data => \n            dataStore.dispatch(addProduct(...data)));\n    }\n\n    render = () => \n        <div className=\"App\">\n            <Provider store={ dataStore }>\n                <BrowserRouter>\n                    <Switch>\n                        <Route path=\"/products\" component={ ConnectedProductList } />\n                        <Route path=\"/order\" render={ (props) => \n                            <OrderDetails { ...props } submitCallback={ () =>\n                                this.submitCallback(props) } />\n                        } />\n                        <Route path=\"/summary/:id\" component={ Summary } />\n                        <Redirect to=\"/products\" />\n                    </Switch>\n                </BrowserRouter>\n            </Provider>\n        </div>    \n\n    submitCallback = (routeProps: RouteComponentProps) => {        \n        this.httpHandler.storeOrder(dataStore.getState().order, \n            id => routeProps.history.push( `/summary/${id}`));\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}